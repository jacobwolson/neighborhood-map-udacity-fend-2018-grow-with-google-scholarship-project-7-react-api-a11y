newLI.addEventListener('click', function() {
                let associatedMarker = document.getElementById('gmimap' + i)
                console.log(associatedMarker)
                associatedMarker.click();
            });

---------------------------------------------

{/* {this.props.markers.map((marker, i) => {
          return(
            <Marker
              key={i}
              onClick={this.onMarkerClick}
              name={marker.name}
              position={marker.coordinates}
            />
          )
        })} */}

        {/* {this.makeMarkers(this.props.markers)} */}

--------------------------------------------------------------------

  // this.props.onClickLI(this.props.associatedMarkerProps[i], this.props.associatedMarker[i])
                console.log("Click LI")
                // console.log(associatedMarker)

---------------------------------------------------------------------------

/* Cnosulted/sources, general: https://scotch.io/tutorials/react-apps-with-the-google-maps-api-and-google-maps-react
    https://github.com/fullstackreact/google-maps-react/blob/master/README.md
*/
// Consulted for dynamically adding markers: https://stackoverflow.com/a/43938322

/* consulted: https://stackoverflow.com/a/53322289
https://stackoverflow.com/a/47563854
https://reactjs.org/docs/lifting-state-up.html#lifting-state-up
*/

import React, { Component } from 'react'
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'
import ListView from './ListView'


// ListView Props

// const buttonOneText = "Show All"

// const buttonTwoText = "Show North of Cal Anderson"




export class MapContainer extends Component {
 
  state = {
    // markers: null,
    // markerProps: null,
    mapObject: null,
    showingInfoWindow: false, 
    activeMarker: {},          
    selectedPlace: {},     
  };

  markersArray = []
  markerPropsArray = []

  onMapReady = (mapProps, map) => {
    console.log("map is ready")
    this.setState({mapObject: map})
    // this.makeMarkers(this.props.markers)
    this.placeMarkers(this.state.mapObject);
  }

  componentDidUpdate() {
    if (this.markersArray) {
      this.placeMarkers(this.state.mapObject)
    }
  }

  // https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  // https://developers.google.com/maps/documentation/javascript/markers
  makeMarkers = (markersList) => {
    if (this.markersArray) {
       this.removeMarkers()
    }
    let markerProps = []
    let markers = []
    markersList.map((marker, i) => {
      console.log("making markers")
      let theseProps = {
        key: marker.name,
        index: i,
        name: marker.name,
        position: marker.coordinates
      }
      let thisMarker = new this.props.google.maps.Marker({
        position: marker.coordinates,
        map: this.state.mapObject
      })
      thisMarker.addListener('click', () => {
        console.log("marker" + i + "clicked")
        console.log(theseProps)
        console.log(thisMarker)
        // this.onMarkerClick(theseProps, thisMarker)
        this.onMarkerClick(theseProps, thisMarker)
      })
      markerProps.push(theseProps)
      markers.push(thisMarker)
      // return thisMarker
    })
    // this.setState({
    //   markers: markers,
    //   markerProps: markerProps,
    // })
    this.markerPropsArray = markerProps
    this.markersArray = markers
    console.log(this.markerPropsArray)
    console.log(this.markersArray)
  }

  // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  placeMarkers = (map) => {
    this.markersArray.forEach(marker => {
      marker.setMap(map)
    })
  }

  // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  removeMarkers = () => this.placeMarkers(null)

  onMarkerClick = (props, marker, e) => 
    {this.setState({
      selectedPlace: props,
      activeMarker: marker,
      showingInfoWindow: true
    })};

  onClose = props => {
    if (this.state.infoWindowDisplayed) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null
      });
    }
  };

  onMapClicked = (props) => {
    if (this.state.showingInfoWindow) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null
      })
    }
  };

  render() {
    return (
      <div className="container">
      <div>
      <ListView
        markers={this.props.markers}
        associatedMarkerProps={this.markerPropsArray}
        associatedMarkers={this.markersArray}
        onClickLI={this.onMarkerClick}
        
        buttonOneOnClick={this.props.buttonOneOnClick}
        buttonOneText={this.props.buttonOneText}
        buttonTwoOnClick={this.props.buttonTwoOnClick}
        buttonTwoText={this.props.buttonTwoText}
      />
      </div>
      <div>
      <Map 
        google={this.props.google}
        onReady={this.onMapReady}
        onClick={this.onMapClicked}
        style={this.props.mapStyles} 
        zoom={this.props.zoom}
        initialCenter={this.props.initialCenter}
      >
        {this.makeMarkers(this.props.markers)}
        <InfoWindow
          buttonOneOnClick={this.props.buttonOneOnClick}
          buttonOneText={this.props.buttonOneText}
          marker={this.state.activeMarker}
          visible={this.state.showingInfoWindow}
          onClose={this.onClose}
        >
          <div>
            <h4>{this.state.selectedPlace.name}</h4>
          </div>
        </InfoWindow>
      </Map>
      </div>
      </div>
    );
  }
}
 
export default GoogleApiWrapper({
  apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(MapContainer)


-------------------------------------------------------------------------------


 {/* <ListView
          markers={this.state.markers}
          onItemClick={this.onMarkerClick}
          buttonOneOnClick={this.showAll}
          buttonOneText={buttonOneText}
          buttonTwoOnClick={this.showNorthOfCal}
          buttonTwoText= {buttonTwoText}
        /> */}


--------------------------------------------------------------------------------------


  // componentDidUpdate() {
  //   this.updateMarkers()
  //   this.refs.listView.populateList()
  // }

//   storeMarkerInfo = (thisMarker) => {
//     // this.markersArray = []
//     // this.markerPropsArray = []
//   // let markerProps = []
//   // let markers = []
//   // let theseProps = this.props.markers.map((marker, i) => {
//   //   return {
//   //     key: marker.name,
//   //     index: i,
//   //     name: marker.name,
//   //     position: marker.coordinates
//   //     }
//   // })
//   let theseProps = {
//       key: thisMarker.props.name,
//       index: '',
//       name: thisMarker.props.name,
//       position: thisMarker.props.position
//   }
//     // let markerCopy = new this.props.google.maps.Marker({
//     //   position: marker.coordinates,
//     //   map: this.mapObject
//     // })
//     console.log(thisMarker)
//     // let markerCopy = Object.assign({}, thisMarker)
//     let markerCopy = React.cloneElement(thisMarker)
//     console.log(markerCopy)
//     this.markersArray.push(markerCopy)
//     // markers.push(thisMarker)
//     this.markerPropsArray.push(theseProps)
//     console.log(this.markersArray)
//     console.log(this.markerPropsArray)
//     // console.log(markers)
//   // this.markerPropsArray = markerProps
//   // this.markersArray = markers
//   // console.log(this.markersArray)
// }

  // // componentDidMount() {
  // //   this.refs.listView.populateList()
  // // }

  // componentDidUpdate() {
  //   if (this.markersArray) {
  //     this.makeMarkers(this.props.markers)
  //     this.placeMarkers(this.state.mapObject)
  //     this.refs.listView.populateList()
  //   }
  //   // this.refs.listView.populateList()
  // }

  // // https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  // // https://developers.google.com/maps/documentation/javascript/markers
  // makeMarkers = (markersList) => {
  //   if (this.markersArray) {
  //      this.removeMarkers()
  //   }
  //   let markerProps = []
  //   let markers = []
  //   markersList.map((marker, i) => {
  //     let theseProps = {
  //       key: marker.name,
  //       index: i,
  //       name: marker.name,
  //       position: marker.coordinates
  //     }
  //     let thisMarker = new this.props.google.maps.Marker({
  //       position: marker.coordinates,
  //       // map: this.state.mapObject
  //     })
  //     console.log(thisMarker)
  //     console.log(theseProps)
  //     thisMarker.addListener('click', () => {
  //       this.onMarkerClick(theseProps, thisMarker)
  //       console.log("marker click")
  //       console.log(theseProps)
  //       console.log(thisMarker)
  //     })
  //     markerProps.push(theseProps)
  //     markers.push(thisMarker)
  //   })
  //   this.markerPropsArray = markerProps
  //   this.markersArray = markers
  //   console.log(this.markerPropsArray)
  //   console.log(this.markersArray)
  //   // if (this.refs.listView) {
  //   //   this.refs.listView.populateList()
  //   // }
  // }

  // // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  // placeMarkers = (map) => {
  //   this.markersArray.forEach(marker => {
  //     marker.setMap(map)
  //   })
  //   console.log("markers set")
  //   // if (this.refs.listView) {
  //   //   this.refs.listView.populateList()
  //   //   console.log("list view populated")
  //   // } else {
  //   //   console.log("No ListView yet")
  //   // }
  // }

  // removeMarkers = () => this.placeMarkers(null)

  // onMarkerClick = (props, marker, e) => {
  //   console.log("On Marker Click Invoked")
  //   {this.setState({
  //     selectedPlace: props,
  //     activeMarker: marker,
  //     showingInfoWindow: true
  //   })};
      // let markerProps = []
      // let markers = []
      // this.props.markers.map((marker, i) => {
      //   let theseProps = {
      //     key: marker.name,
      //     index: i,
      //     name: marker.name,
      //     position: marker.coordinates
      //   }
      //   let thisMarker = new this.props.google.maps.Marker({
      //     position: marker.coordinates,
      //   })
      //   markerProps.push(theseProps)
      //   markers.push(thisMarker)
      // })
      // this.markerPropsArray = markerProps
      // this.markersArray = markers
  // }

  // onClose = props => {
  //   if (this.state.infoWindowDisplayed) {
  //     this.setState({
  //       showingInfoWindow: false,
  //       activeMarker: null
  //     });
  //   }
  // };

--------------------------------------------------------------------------------

{/* { this.markersArray = [],
          this.markerPropsArray = [],
          this.props.markers.map((marker, i) => {
            let thisMarker = (
              <Marker 
                onClick={this.onMarkerClick}
                name={marker.name}
                position={marker.coordinates}
              />
            )
            this.storeMarkerInfo(thisMarker)
            return thisMarker
          })}
          {console.log(this.markersArray)}

            {/* return(
              <Marker 
                onClick={this.onMarkerClick}
                name={marker.name}
                position={marker.coordinates}
              />
            )
          })} */}

-------------------------------------------------------------------------------------

  // state = {
    //     markers: null
    // }

    // showInfoWindowFromList = (prop, marker) => {
    //     this.props.onClickLI(prop, marker)
    // }

---------------------------------------------------------------------------------


    resetThenSet = (id, key) => {
        let temp = JSON.parse(JSON.stringify(this.state[key]));
        temp.forEach(item => item.selected = false);
        temp[id].selected = true;
        this.setState({
          [key]: temp
        });
      }

---------------------------------------------------------------------------------------------

import React from 'react';
import {Link} from 'react-router-dom';

function NavBar() {
    return (
        <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
        <a className="navbar-brand" href="#">Navbar</a>
        <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor02" aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
          <span className="navbar-toggler-icon"></span>
        </button>
      
        <div className="collapse navbar-collapse" id="navbarColor02">
          <ul className="navbar-nav mr-auto">
            <li className="nav-item active">
              <a className="nav-link" href="#">Home <span className="sr-only">(current)</span></a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">Features</a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">Pricing</a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">About</a>
            </li>
          </ul>
          <form className="form-inline my-2 my-lg-0">
            <input className="form-control mr-sm-2" type="text" placeholder="Search"/>
            <button className="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
          </form>
        </div>
      </nav>
    );
}

export default NavBar;

------------------------------------------------------------------------------------------

import React, { Component } from 'react'
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'

class MapDisplay extends Component {
    state = {
        map: null
    }

    componentDidMount = () => {
    }

    mapReady = (props, map) => {
        this.setState({map})
    }

    render () {
        const style = {
            width: '100%',
            height: '100%'
        }

        const center = {
            lat: this.props.lat,
            lng: this.props.lng
        }

        return (
            <Map
                role="application"
                aria-label="map"
                onReady={this.mapReady}
                google={this.props.google}
                zoom={this.props.zoom}
                style={style}
                initialCenter={center}
            >
            </Map>
        )
    }
}

export default GoogleApiWrapper({apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(MapDisplay)

------------------------------------------------------------------------

import React, { Component } from 'react';
import { withGoogleMap, GoogleMap } from 'react-google-maps';

class Map extends Component {
   render() {

   const GoogleMapExample = withGoogleMap(props => (
      <GoogleMap
        defaultCenter = { { lat: 47.619947, lng: -122.312797 } }
        defaultZoom = { 10 }
      >
      </GoogleMap>
   ));

   return(
      <div>
        <GoogleMapExample
          containerElement={ <div style={{ height: `10em`, width: '10em' }} /> }
          mapElement={ <div style={{ height: `100%` }} /> }
        />
      </div>
   );
   }
};

export default Map;

--------------------------------------------------------------------------------------------

import React, { Component } from 'react';
import MapContainer from './MapContainer'

const mapStyles = {
  width: '100%',
  height: '100%'
}

const initialCenter = {
  lat: 47.619947, 
  lng: -122.312797
}

const zoom = 12

const buttonOneText = "Show All"

const buttonTwoText = "Show North of Cal Anderson"

const viewpoints = [
  {name: 'Kerry Park', coordinates: {lat: 47.629474, lng: -122.359473}, url: 'https://www.seattle.gov/parks/find/parks/kerry-park'},
  {name: 'Bhy Kracke Park', coordinates: {lat: 47.6304279, lng: -122.3494543}, url: 'https://www.seattle.gov/parks/find/parks/bhy-kracke-park'},
  {name: 'Jefferson Park', coordinates: {lat: 47.571434, lng: -122.311624}, url: 'https://www.seattle.gov/parks/find/parks/jefferson-park'},
  {name: 'Hamilton Viewpoint Park', coordinates: {lat: 47.5930187, lng: -122.3865962}, url: 'https://www.seattle.gov/parks/find/parks/hamilton-viewpoint-park'},
  {name: 'Dr. Jose P. Rizal Park', coordinates: {lat: 47.5927791, lng: -122.3183334}, url: 'https://www.seattle.gov/parks/find/parks/dr-jose-rizal-park'},
  {name: 'Ella Bailey Park', coordinates: {lat: 47.6408936, lng: -122.3934932}, url: 'https://www.seattle.gov/parks/find/parks/ella-bailey-park'}
]

class App extends Component {
  
  state = {
    locations: []
  }

  showNorthOfCal = () => {
    const markersNorthOfCal = this.state.locations.filter(location => location.coordinates.lat > 47.6173)
    this.setState({locations: markersNorthOfCal})
  }

  showAll = () => {
    this.setState({locations: viewpoints})
  }

  componentDidMount() {
    this.setState({locations: viewpoints})
  }

  render() {
    return (
      <div>
        <div>
          <h1>Best Views Seattle Map</h1>
        </div>
        <div className="container">
          <MapContainer
            locations={this.state.locations}
            mapStyles={mapStyles}
            initialCenter={initialCenter}
            zoom={zoom}
            // ListView-specific props
            onItemClick={this.onMarkerClick}
            buttonOneOnClick={this.showAll}
            showAll={this.showAll}
            buttonOneText={buttonOneText}
            buttonTwoOnClick={this.showNorthOfCal}
            showNorthOfCal={this.showNorthOfCal}
            buttonTwoText= {buttonTwoText}
          />
        </div>
      </div>
    );
  }
}

export default App;

--------------------------------------------------------------------------------------

import React, { Component } from 'react'
import SelectMenu from './SelectMenu'
class ListView extends Component {
    
    markerPropsArray = []
    markersArray = []

    // Consulted for creating and adding new LI: https://www.w3schools.com/jsref/met_node_appendchild.asp
    // Code for clearing list: https://stackoverflow.com/a/27324794
    populateList = () => {
        const listViewList = document.getElementById('list-view-list')
        if (listViewList) {
            listViewList.innerHTML = ''
        
        let clickLI = this.props.onClickLI
        let i = 0;
        let markerPropsList = this.props.markerPropsList
        let markersList = this.props.markersList
        markerPropsList.forEach(markerProp => {
            const newLI = document.createElement('li')
            newLI.innerHTML = markerProp.name;
            let associatedMarker = markersList[i]
            let associatedMarkerProps = markerPropsList[i]
            newLI.addEventListener('click', () => clickLI(associatedMarkerProps, associatedMarker))
            listViewList.appendChild(newLI)
            i++
        })
        }
    }

    render() {

        return(
            <span>
                <SelectMenu
                    filterLocations={this.props.filterLocations}
                />
                <ul>
                    <li>
                        <button onClick={this.props.buttonOneOnClick}>
                            {this.props.buttonOneText}
                        </button>
                    </li>
                    <li>
                        <button onClick={this.props.buttonTwoOnClick}>
                            {this.props.buttonTwoText}
                        </button>
                    </li>
                </ul>
                <ul id="list-view-list">
                {/* An appropriately filtered list of our locations will go here whenever the `.populateList()` method is invoked.
                */}
                </ul>
            </span>
        )
    }
}

export default ListView

------------------------------------------------------------------------------------------

// Source: https://github.com/dbilgili/Custom-ReactJS-Dropdown-Components
// Source: https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
// Source: https://www.w3schools.com/tags/tag_select.asp
// Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select
// Sources: https://stackoverflow.com/questions/19329978/change-selects-option-and-trigger-events-with-javascript

import React, { Component } from 'react'

class SelectMenu extends Component {

    render() {

        return (
            <div className="select-menu-container">
                <label for="filter-options">Filter by Location</label>
                <div>
                    <select id="filter-options" autofocus 
                        onChange={() => {
                        let selectedValue = document.getElementById('filter-options').value
                        console.log(selectedValue)
                        let selectedOption =    document.getElementById('filter-option-anywhere').selected
                                            ? 'anywhere' :
                                            document.getElementById('filter-option-southOfCal').selected
                                            ? 'southOfCal' :
                                            document.getElementById('filter-option-westOfCal').selected
                                            ? 'westOfCal' :
                                            document.getElementById('filter-option-northOfCal').selected
                                            ?  'northOfCal' : 
                                            null

                        this.props.filterLocations(selectedOption)}
                        }>
                        <option className="filter-option" id="filter-option-anywhere" value="anywhere">Anywhere</option>
                        <option className="filter-option" id="filter-option-southOfCal" value="southOfCal">South of Cal Anderson</option>
                        <option className="filter-option" id="filter-option-westOfCal" value="westOFCal">West of Cal Anderson</option>
                        <option className="filter-option" id="filter-option-northOfCal" value="northOfCal">North of Cal Anderson</option>
                    </select>
                </div>
            </div>
            )
    }
}

export default SelectMenu

-----------------------------------------------------------------------------------------------
