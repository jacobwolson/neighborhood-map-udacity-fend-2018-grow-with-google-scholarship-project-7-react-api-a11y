newLI.addEventListener('click', function() {
                let associatedMarker = document.getElementById('gmimap' + i)
                console.log(associatedMarker)
                associatedMarker.click();
            });

---------------------------------------------

{/* {this.props.markers.map((marker, i) => {
          return(
            <Marker
              key={i}
              onClick={this.onMarkerClick}
              name={marker.name}
              position={marker.coordinates}
            />
          )
        })} */}

        {/* {this.makeMarkers(this.props.markers)} */}

--------------------------------------------------------------------

  // this.props.onClickLI(this.props.associatedMarkerProps[i], this.props.associatedMarker[i])
                console.log("Click LI")
                // console.log(associatedMarker)

---------------------------------------------------------------------------

/* Cnosulted/sources, general: https://scotch.io/tutorials/react-apps-with-the-google-maps-api-and-google-maps-react
    https://github.com/fullstackreact/google-maps-react/blob/master/README.md
*/
// Consulted for dynamically adding markers: https://stackoverflow.com/a/43938322

/* consulted: https://stackoverflow.com/a/53322289
https://stackoverflow.com/a/47563854
https://reactjs.org/docs/lifting-state-up.html#lifting-state-up
*/

import React, { Component } from 'react'
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'
import ListView from './ListView'


// ListView Props

// const buttonOneText = "Show All"

// const buttonTwoText = "Show North of Cal Anderson"




export class MapContainer extends Component {
 
  state = {
    // markers: null,
    // markerProps: null,
    mapObject: null,
    showingInfoWindow: false, 
    activeMarker: {},          
    selectedPlace: {},     
  };

  markersArray = []
  markerPropsArray = []

  onMapReady = (mapProps, map) => {
    console.log("map is ready")
    this.setState({mapObject: map})
    // this.makeMarkers(this.props.markers)
    this.placeMarkers(this.state.mapObject);
  }

  componentDidUpdate() {
    if (this.markersArray) {
      this.placeMarkers(this.state.mapObject)
    }
  }

  // https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  // https://developers.google.com/maps/documentation/javascript/markers
  makeMarkers = (markersList) => {
    if (this.markersArray) {
       this.removeMarkers()
    }
    let markerProps = []
    let markers = []
    markersList.map((marker, i) => {
      console.log("making markers")
      let theseProps = {
        key: marker.name,
        index: i,
        name: marker.name,
        position: marker.coordinates
      }
      let thisMarker = new this.props.google.maps.Marker({
        position: marker.coordinates,
        map: this.state.mapObject
      })
      thisMarker.addListener('click', () => {
        console.log("marker" + i + "clicked")
        console.log(theseProps)
        console.log(thisMarker)
        // this.onMarkerClick(theseProps, thisMarker)
        this.onMarkerClick(theseProps, thisMarker)
      })
      markerProps.push(theseProps)
      markers.push(thisMarker)
      // return thisMarker
    })
    // this.setState({
    //   markers: markers,
    //   markerProps: markerProps,
    // })
    this.markerPropsArray = markerProps
    this.markersArray = markers
    console.log(this.markerPropsArray)
    console.log(this.markersArray)
  }

  // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  placeMarkers = (map) => {
    this.markersArray.forEach(marker => {
      marker.setMap(map)
    })
  }

  // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  removeMarkers = () => this.placeMarkers(null)

  onMarkerClick = (props, marker, e) => 
    {this.setState({
      selectedPlace: props,
      activeMarker: marker,
      showingInfoWindow: true
    })};

  onClose = props => {
    if (this.state.infoWindowDisplayed) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null
      });
    }
  };

  onMapClicked = (props) => {
    if (this.state.showingInfoWindow) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null
      })
    }
  };

  render() {
    return (
      <div className="container">
      <div>
      <ListView
        markers={this.props.markers}
        associatedMarkerProps={this.markerPropsArray}
        associatedMarkers={this.markersArray}
        onClickLI={this.onMarkerClick}
        
        buttonOneOnClick={this.props.buttonOneOnClick}
        buttonOneText={this.props.buttonOneText}
        buttonTwoOnClick={this.props.buttonTwoOnClick}
        buttonTwoText={this.props.buttonTwoText}
      />
      </div>
      <div>
      <Map 
        google={this.props.google}
        onReady={this.onMapReady}
        onClick={this.onMapClicked}
        style={this.props.mapStyles} 
        zoom={this.props.zoom}
        initialCenter={this.props.initialCenter}
      >
        {this.makeMarkers(this.props.markers)}
        <InfoWindow
          buttonOneOnClick={this.props.buttonOneOnClick}
          buttonOneText={this.props.buttonOneText}
          marker={this.state.activeMarker}
          visible={this.state.showingInfoWindow}
          onClose={this.onClose}
        >
          <div>
            <h4>{this.state.selectedPlace.name}</h4>
          </div>
        </InfoWindow>
      </Map>
      </div>
      </div>
    );
  }
}
 
export default GoogleApiWrapper({
  apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(MapContainer)


-------------------------------------------------------------------------------


 {/* <ListView
          markers={this.state.markers}
          onItemClick={this.onMarkerClick}
          buttonOneOnClick={this.showAll}
          buttonOneText={buttonOneText}
          buttonTwoOnClick={this.showNorthOfCal}
          buttonTwoText= {buttonTwoText}
        /> */}


--------------------------------------------------------------------------------------


  // componentDidUpdate() {
  //   this.updateMarkers()
  //   this.refs.listView.populateList()
  // }

//   storeMarkerInfo = (thisMarker) => {
//     // this.markersArray = []
//     // this.markerPropsArray = []
//   // let markerProps = []
//   // let markers = []
//   // let theseProps = this.props.markers.map((marker, i) => {
//   //   return {
//   //     key: marker.name,
//   //     index: i,
//   //     name: marker.name,
//   //     position: marker.coordinates
//   //     }
//   // })
//   let theseProps = {
//       key: thisMarker.props.name,
//       index: '',
//       name: thisMarker.props.name,
//       position: thisMarker.props.position
//   }
//     // let markerCopy = new this.props.google.maps.Marker({
//     //   position: marker.coordinates,
//     //   map: this.mapObject
//     // })
//     console.log(thisMarker)
//     // let markerCopy = Object.assign({}, thisMarker)
//     let markerCopy = React.cloneElement(thisMarker)
//     console.log(markerCopy)
//     this.markersArray.push(markerCopy)
//     // markers.push(thisMarker)
//     this.markerPropsArray.push(theseProps)
//     console.log(this.markersArray)
//     console.log(this.markerPropsArray)
//     // console.log(markers)
//   // this.markerPropsArray = markerProps
//   // this.markersArray = markers
//   // console.log(this.markersArray)
// }

  // // componentDidMount() {
  // //   this.refs.listView.populateList()
  // // }

  // componentDidUpdate() {
  //   if (this.markersArray) {
  //     this.makeMarkers(this.props.markers)
  //     this.placeMarkers(this.state.mapObject)
  //     this.refs.listView.populateList()
  //   }
  //   // this.refs.listView.populateList()
  // }

  // // https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  // // https://developers.google.com/maps/documentation/javascript/markers
  // makeMarkers = (markersList) => {
  //   if (this.markersArray) {
  //      this.removeMarkers()
  //   }
  //   let markerProps = []
  //   let markers = []
  //   markersList.map((marker, i) => {
  //     let theseProps = {
  //       key: marker.name,
  //       index: i,
  //       name: marker.name,
  //       position: marker.coordinates
  //     }
  //     let thisMarker = new this.props.google.maps.Marker({
  //       position: marker.coordinates,
  //       // map: this.state.mapObject
  //     })
  //     console.log(thisMarker)
  //     console.log(theseProps)
  //     thisMarker.addListener('click', () => {
  //       this.onMarkerClick(theseProps, thisMarker)
  //       console.log("marker click")
  //       console.log(theseProps)
  //       console.log(thisMarker)
  //     })
  //     markerProps.push(theseProps)
  //     markers.push(thisMarker)
  //   })
  //   this.markerPropsArray = markerProps
  //   this.markersArray = markers
  //   console.log(this.markerPropsArray)
  //   console.log(this.markersArray)
  //   // if (this.refs.listView) {
  //   //   this.refs.listView.populateList()
  //   // }
  // }

  // // https://developers.google.com/maps/documentation/javascript/examples/marker-remove
  // placeMarkers = (map) => {
  //   this.markersArray.forEach(marker => {
  //     marker.setMap(map)
  //   })
  //   console.log("markers set")
  //   // if (this.refs.listView) {
  //   //   this.refs.listView.populateList()
  //   //   console.log("list view populated")
  //   // } else {
  //   //   console.log("No ListView yet")
  //   // }
  // }

  // removeMarkers = () => this.placeMarkers(null)

  // onMarkerClick = (props, marker, e) => {
  //   console.log("On Marker Click Invoked")
  //   {this.setState({
  //     selectedPlace: props,
  //     activeMarker: marker,
  //     showingInfoWindow: true
  //   })};
      // let markerProps = []
      // let markers = []
      // this.props.markers.map((marker, i) => {
      //   let theseProps = {
      //     key: marker.name,
      //     index: i,
      //     name: marker.name,
      //     position: marker.coordinates
      //   }
      //   let thisMarker = new this.props.google.maps.Marker({
      //     position: marker.coordinates,
      //   })
      //   markerProps.push(theseProps)
      //   markers.push(thisMarker)
      // })
      // this.markerPropsArray = markerProps
      // this.markersArray = markers
  // }

  // onClose = props => {
  //   if (this.state.infoWindowDisplayed) {
  //     this.setState({
  //       showingInfoWindow: false,
  //       activeMarker: null
  //     });
  //   }
  // };

--------------------------------------------------------------------------------

{/* { this.markersArray = [],
          this.markerPropsArray = [],
          this.props.markers.map((marker, i) => {
            let thisMarker = (
              <Marker 
                onClick={this.onMarkerClick}
                name={marker.name}
                position={marker.coordinates}
              />
            )
            this.storeMarkerInfo(thisMarker)
            return thisMarker
          })}
          {console.log(this.markersArray)}

            {/* return(
              <Marker 
                onClick={this.onMarkerClick}
                name={marker.name}
                position={marker.coordinates}
              />
            )
          })} */}

-------------------------------------------------------------------------------------

  // state = {
    //     markers: null
    // }

    // showInfoWindowFromList = (prop, marker) => {
    //     this.props.onClickLI(prop, marker)
    // }

---------------------------------------------------------------------------------


    resetThenSet = (id, key) => {
        let temp = JSON.parse(JSON.stringify(this.state[key]));
        temp.forEach(item => item.selected = false);
        temp[id].selected = true;
        this.setState({
          [key]: temp
        });
      }

---------------------------------------------------------------------------------------------

import React from 'react';
import {Link} from 'react-router-dom';

function NavBar() {
    return (
        <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
        <a className="navbar-brand" href="#">Navbar</a>
        <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor02" aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
          <span className="navbar-toggler-icon"></span>
        </button>
      
        <div className="collapse navbar-collapse" id="navbarColor02">
          <ul className="navbar-nav mr-auto">
            <li className="nav-item active">
              <a className="nav-link" href="#">Home <span className="sr-only">(current)</span></a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">Features</a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">Pricing</a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">About</a>
            </li>
          </ul>
          <form className="form-inline my-2 my-lg-0">
            <input className="form-control mr-sm-2" type="text" placeholder="Search"/>
            <button className="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
          </form>
        </div>
      </nav>
    );
}

export default NavBar;

------------------------------------------------------------------------------------------

import React, { Component } from 'react'
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'

class MapDisplay extends Component {
    state = {
        map: null
    }

    componentDidMount = () => {
    }

    mapReady = (props, map) => {
        this.setState({map})
    }

    render () {
        const style = {
            width: '100%',
            height: '100%'
        }

        const center = {
            lat: this.props.lat,
            lng: this.props.lng
        }

        return (
            <Map
                role="application"
                aria-label="map"
                onReady={this.mapReady}
                google={this.props.google}
                zoom={this.props.zoom}
                style={style}
                initialCenter={center}
            >
            </Map>
        )
    }
}

export default GoogleApiWrapper({apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(MapDisplay)

------------------------------------------------------------------------

import React, { Component } from 'react';
import { withGoogleMap, GoogleMap } from 'react-google-maps';

class Map extends Component {
   render() {

   const GoogleMapExample = withGoogleMap(props => (
      <GoogleMap
        defaultCenter = { { lat: 47.619947, lng: -122.312797 } }
        defaultZoom = { 10 }
      >
      </GoogleMap>
   ));

   return(
      <div>
        <GoogleMapExample
          containerElement={ <div style={{ height: `10em`, width: '10em' }} /> }
          mapElement={ <div style={{ height: `100%` }} /> }
        />
      </div>
   );
   }
};

export default Map;

--------------------------------------------------------------------------------------------

import React, { Component } from 'react';
import MapContainer from './MapContainer'

const mapStyles = {
  width: '100%',
  height: '100%'
}

const initialCenter = {
  lat: 47.619947, 
  lng: -122.312797
}

const zoom = 12

const buttonOneText = "Show All"

const buttonTwoText = "Show North of Cal Anderson"

const viewpoints = [
  {name: 'Kerry Park', coordinates: {lat: 47.629474, lng: -122.359473}, url: 'https://www.seattle.gov/parks/find/parks/kerry-park'},
  {name: 'Bhy Kracke Park', coordinates: {lat: 47.6304279, lng: -122.3494543}, url: 'https://www.seattle.gov/parks/find/parks/bhy-kracke-park'},
  {name: 'Jefferson Park', coordinates: {lat: 47.571434, lng: -122.311624}, url: 'https://www.seattle.gov/parks/find/parks/jefferson-park'},
  {name: 'Hamilton Viewpoint Park', coordinates: {lat: 47.5930187, lng: -122.3865962}, url: 'https://www.seattle.gov/parks/find/parks/hamilton-viewpoint-park'},
  {name: 'Dr. Jose P. Rizal Park', coordinates: {lat: 47.5927791, lng: -122.3183334}, url: 'https://www.seattle.gov/parks/find/parks/dr-jose-rizal-park'},
  {name: 'Ella Bailey Park', coordinates: {lat: 47.6408936, lng: -122.3934932}, url: 'https://www.seattle.gov/parks/find/parks/ella-bailey-park'}
]

class App extends Component {
  
  state = {
    locations: []
  }

  showNorthOfCal = () => {
    const markersNorthOfCal = this.state.locations.filter(location => location.coordinates.lat > 47.6173)
    this.setState({locations: markersNorthOfCal})
  }

  showAll = () => {
    this.setState({locations: viewpoints})
  }

  componentDidMount() {
    this.setState({locations: viewpoints})
  }

  render() {
    return (
      <div>
        <div>
          <h1>Best Views Seattle Map</h1>
        </div>
        <div className="container">
          <MapContainer
            locations={this.state.locations}
            mapStyles={mapStyles}
            initialCenter={initialCenter}
            zoom={zoom}
            // ListView-specific props
            onItemClick={this.onMarkerClick}
            buttonOneOnClick={this.showAll}
            showAll={this.showAll}
            buttonOneText={buttonOneText}
            buttonTwoOnClick={this.showNorthOfCal}
            showNorthOfCal={this.showNorthOfCal}
            buttonTwoText= {buttonTwoText}
          />
        </div>
      </div>
    );
  }
}

export default App;

--------------------------------------------------------------------------------------

import React, { Component } from 'react'
import SelectMenu from './SelectMenu'
class ListView extends Component {
    
    markerPropsArray = []
    markersArray = []

    // Consulted for creating and adding new LI: https://www.w3schools.com/jsref/met_node_appendchild.asp
    // Code for clearing list: https://stackoverflow.com/a/27324794
    populateList = () => {
        const listViewList = document.getElementById('list-view-list')
        if (listViewList) {
            listViewList.innerHTML = ''
        
        let clickLI = this.props.onClickLI
        let i = 0;
        let markerPropsList = this.props.markerPropsList
        let markersList = this.props.markersList
        markerPropsList.forEach(markerProp => {
            const newLI = document.createElement('li')
            newLI.innerHTML = markerProp.name;
            let associatedMarker = markersList[i]
            let associatedMarkerProps = markerPropsList[i]
            newLI.addEventListener('click', () => clickLI(associatedMarkerProps, associatedMarker))
            listViewList.appendChild(newLI)
            i++
        })
        }
    }

    render() {

        return(
            <span>
                <SelectMenu
                    filterLocations={this.props.filterLocations}
                />
                <ul>
                    <li>
                        <button onClick={this.props.buttonOneOnClick}>
                            {this.props.buttonOneText}
                        </button>
                    </li>
                    <li>
                        <button onClick={this.props.buttonTwoOnClick}>
                            {this.props.buttonTwoText}
                        </button>
                    </li>
                </ul>
                <ul id="list-view-list">
                {/* An appropriately filtered list of our locations will go here whenever the `.populateList()` method is invoked.
                */}
                </ul>
            </span>
        )
    }
}

export default ListView

------------------------------------------------------------------------------------------

// Source: https://github.com/dbilgili/Custom-ReactJS-Dropdown-Components
// Source: https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
// Source: https://www.w3schools.com/tags/tag_select.asp
// Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select
// Sources: https://stackoverflow.com/questions/19329978/change-selects-option-and-trigger-events-with-javascript

import React, { Component } from 'react'

class SelectMenu extends Component {

    render() {

        return (
            <div className="select-menu-container">
                <label for="filter-options">Filter by Location</label>
                <div>
                    <select id="filter-options" autofocus 
                        onChange={() => {
                        let selectedValue = document.getElementById('filter-options').value
                        console.log(selectedValue)
                        let selectedOption =    document.getElementById('filter-option-anywhere').selected
                                            ? 'anywhere' :
                                            document.getElementById('filter-option-southOfCal').selected
                                            ? 'southOfCal' :
                                            document.getElementById('filter-option-westOfCal').selected
                                            ? 'westOfCal' :
                                            document.getElementById('filter-option-northOfCal').selected
                                            ?  'northOfCal' : 
                                            null

                        this.props.filterLocations(selectedOption)}
                        }>
                        <option className="filter-option" id="filter-option-anywhere" value="anywhere">Anywhere</option>
                        <option className="filter-option" id="filter-option-southOfCal" value="southOfCal">South of Cal Anderson</option>
                        <option className="filter-option" id="filter-option-westOfCal" value="westOFCal">West of Cal Anderson</option>
                        <option className="filter-option" id="filter-option-northOfCal" value="northOfCal">North of Cal Anderson</option>
                    </select>
                </div>
            </div>
            )
    }
}

export default SelectMenu

-----------------------------------------------------------------------------------------------

// let url = 'http://api.flickr.com/services/rest/?&method=flickr.people.getPublicPhotos&api_key=${FLICKR_API_KEY}&user_id=psychasec'
    fetch(restRequest)

    -----------------------------------------------------------------------------------------

    
onMarkerClick = (props, marker, e) => {
  this.closeInfoWindow()
  // Fetch info from Foursquare
  // https://stackoverflow.com/a/17864016
  // https://developer.foursquare.com/docs/api/configuration/versioning
  this.getFlickrImages(props, marker)
  let fsUrl = `https://api.foursquare.com/v2/venues/search?client_id=${FOURSQUARE_CLIENT_ID}&client_secret=${FOURSQUARE_CLIENT_SECRET}&v=${FOURSQUARE_VERSION}&radius=100&ll=${props.position.lat},${props.position.lng}&llAcc=200`
  let headers = new Headers()
  let request = new Request(fsUrl, {
    method: 'GET',
    headers
  })
  // Code from: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  let activeMarkerProps
  fetch(request)
    .then(response => 
    
      // console.log(response)
      console.log(response)
   )
    .then(result => console.log(result))
      
      // {
    //   let venue = this.getVenues(props, result)[0]
    //   activeMarkerProps = {
    //     // props that were passed in to funciton
    //     ...props,
    //     // foursquare data for venue
    //     foursquare: venue
    //   }
    //   if (activeMarkerProps.foursquare) {
    //     let imageUrl = `https://api.foursquare.com/v2/venues/${venue.id}/photos?client_id=${FOURSQUARE_CLIENT_ID}&client_secret=${FOURSQUARE_CLIENT_SECRET}&v=${FOURSQUARE_VERSION}`
    //     fetch(imageUrl).then(response => response.json()).then(result => {
    //       activeMarkerProps = {
    //         ...activeMarkerProps,
    //         images: result.response.photos
    //       }
    //       if (this.state.activeMarker)
    //         this.state.activeMarker.setAnimation(null)
    //         // thanks to: https://stackoverflow.com/a/36396843
    //         marker.setAnimation(4)
    //         {this.setState({
    //           activeMarkerProps,
    //           activeMarker: marker,
    //           showingInfoWindow: true
    //         })}
    //     })
    //   } else {
    //       // marker.setAnimation(this.props.google.maps.Animation.BOUNCE)
    //       marker.setAnimation(4)
    //       {this.setState({
    //         activeMarkerProps,
    //         activeMarker: marker,
    //         showingInfoWindow: true
    //       })}
    //   }
    // })
  }

  -------------------------------------------------------

  
const FOURSQUARE_CLIENT_ID = "WBRJ0OIHLBSA0BEJ0WYUGV2EYMNV5DN25SNEGYBVCM0LPR0M"
const FOURSQUARE_CLIENT_SECRET = "44CDSMTT0QOYYOHLTJHZOOP5OL5XDC2JZIUFWJFNSHXI0DGH"
const FOURSQUARE_VERSION = "20181125"


---------------------------------------------------------------------------

const FLICKR_SECRET = "4c440ad4f71f5d1b"

---------------------------------------------------------------------------------


// Walkthrough consulted: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be

/* Consulted sources, general: https://scotch.io/tutorials/react-apps-with-the-google-maps-api-and-google-maps-react
    https://github.com/fullstackreact/google-maps-react/blob/master/README.md
*/
// Consulted for dynamically adding markers: https://stackoverflow.com/a/43938322

/* consulted: https://stackoverflow.com/a/53322289
https://stackoverflow.com/a/47563854
https://reactjs.org/docs/lifting-state-up.html#lifting-state-up
// https://reactjs.org/docs/components-and-props.html
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
*/

import React, { Component } from 'react'
import {Map, InfoWindow, GoogleApiWrapper} from 'google-maps-react'
import ListView from './ListView'

const FLICKR_API_KEY = "2b6766fb0960cc8091819b49e304df4b"

export class LocationsDisplay extends Component {

  mapObject = null 
 
  state = {
    markers: [],
    markerProps: [],
    activeMarker: null,
    activeMarkerProps: null,
    showingInfoWindow: false         
  };

  markersArray = []
  markerPropsArray = []
  
  onMapReady = (mapProps, map) => {
    this.mapObject = map
    this.updateMarkers(this.props.locations)
    this.refs.listView.populateList()
  }

  componentDidUpdate() {
    this.updateMarkers(this.props.locations)
    this.refs.listView.populateList()
  }

  // Modified from https://stackoverflow.com/a/16436975 to accomodate for arrays containing objects.
  // Also consulted: https://stackoverflow.com/a/14853974
  // https://www.flickr.com/services/api/response.rest.html
  // https://www.flickr.com/services/api/flickr.galleries.getPhotos.html
  // https://www.flickr.com/services/api/misc.urls.html
  // http://code.flickr.net/2008/08/19/standard-photos-response-apis-for-civilized-age/

  arraysMatch(array1, array2) {
    if (array1 == null || array2 == null) return null
    if (array1.length != array2.length) return null
    let i = 0
    let testArray = []
    array1.forEach(item => {
        if (item.name === array2[i].name) {
          testArray.push("match")
        }
        i++
      }
    )
    if (testArray.length === array2.length) {
      return true 
    } else {
      return null
    }
  }

  updateMarkers = (locations) => {
    let markerPropsTemp = []
    let markersTemp = []
    
    // Create and store an object containing the 
    locations.forEach((location, i) => {
      let theseMarkerProps = {
        name: location.name,
        key: i,
        index: i,
        position: location.coordinates,
        website: location.website
      }
      markerPropsTemp.push(theseMarkerProps)
    });

    // Variable for guard, below
    let arraysMatch = this.arraysMatch(this.state.markerProps, markerPropsTemp)

    /* This `if` statement acts as a guard: if the current marker info saved in this component's state,
       as checked via `markerProps`, is an exact match for the current "locations" data, then do 
       not proceed with creating new markers and updating state. This guard avoids a `setState()`-induced
       feedback loop. */
    if (!arraysMatch) {
      this.state.markers.forEach(marker => marker.setMap(null))
      locations.forEach((location, i) => {
      let thisMarker = new this.props.google.maps.Marker({
        position: location.coordinates,
        map: this.mapObject,
        animation: 4,
        url: location.url
      })
      thisMarker.addListener('click', () => {
        this.onMarkerClick(markerPropsTemp[i], thisMarker, null)
      })
      markersTemp.push(thisMarker)
      })
      this.setState({markers: markersTemp, markerProps: markerPropsTemp}) 
    }
}

// Code from: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
getVenues = (props, data) => {
  return data
        .response
        .venues
        .filter(item => item.name.includes(props.name) || props.name.includes(item.name))
}

// Consulted: http://kylerush.net/blog/flickr-api/
// Consulted: https://teamtreehouse.com/community/how-do-i-get-flickr-to-respond-json-that-i-can-use
getFlickrImage = (props, marker) => {
  let firstImage
  let firstImageSrc
  let firstImageOwnerPage
  let clickedMarkerProps
  let restRequest = `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${FLICKR_API_KEY}&text=${props.name}+Seattle&format=json&&nojsoncallback=1`;
  fetch(restRequest)
  .then(response => response.json())
  .then(parsedResponse => {
    firstImage = parsedResponse.photos.photo[0];
    firstImageSrc = `https://farm${firstImage.farm}.staticflickr.com/${firstImage.server}/${firstImage.id}_${firstImage.secret}_m.jpg`
    firstImageOwnerPage = `https://www.flickr.com/photos/${firstImage.owner}/`

    clickedMarkerProps = {
      name: props.name,
      key: props.key,
      index: props.index,
      position: props.position,
      website: props.website,
      flikrImage: firstImageSrc,
      firstImageOwnerPage: firstImageOwnerPage
    }
  
  this.setState({
    activeMarkerProps: clickedMarkerProps,
    activeMarker: marker,
    flikrImage: firstImageSrc,
    showingInfoWindow: true
  })
})
}

onMarkerClick = (props, marker, e) => {
  this.closeInfoWindow()
  // Source: https://stackoverflow.com/a/36396843
  marker.setAnimation(4)
  this.getFlickrImage(props, marker)
}
      
closeInfoWindow = () => {
    this.setState({
      activeMarker: null,
      activeMarkerProps: null,
      showingInfoWindow: false
    })
}

  onMapClicked = () => {
    this.closeInfoWindow()
  }

  filterLocations = (selectedOption) => {
    selectedOption === 'anywhere' ? this.props.showAll()
    : selectedOption === 'southOfCal' ? this.props.showSouthOfCal()
    : selectedOption === 'westOfCal' ? this.props.showWestOfCal()
    : selectedOption === 'northOfCal' && this.props.showNorthOfCal()
  }

  render() {
    return (
      <div className="container map-component-container">
        <div className="container list-view-container">
          <ListView
            google={this.props.google}
            locations={this.props.locations}
            let markersList={this.state.markers}
            let markerPropsList={this.state.markerProps}
            onClickLI={this.onMarkerClick}
            onClose={this.onClose}
            buttonOneOnClick={this.props.buttonOneOnClick}
            buttonOneText={this.props.buttonOneText}
            buttonTwoOnClick={this.props.buttonTwoOnClick}
            buttonTwoText={this.props.buttonTwoText}
            For SelectMenu component
            filterLocations={this.filterLocations}
          />
        </div>
        <div className="container map-view-container">
          <Map 
            google={this.props.google}
            onReady={this.onMapReady}
            onClick={this.onMapClicked}
            style={this.props.mapStyles} 
            zoom={this.props.zoom}
            initialCenter={this.props.initialCenter}
          >
            <InfoWindow
              marker={this.state.activeMarker}
              visible={this.state.showingInfoWindow}
              onClose={this.closeInfoWindow}
            >
            {this.state.activeMarkerProps ? (
              <div className="container infowindow-container">
                <h2>{this.state.activeMarkerProps.name}</h2>
                <img src={this.state.activeMarkerProps && this.state.activeMarkerProps.flikrImage}/>
                <br></br>
                <p className="infowindow-main-text">
                  Image from <a href="https:www.flickr.com">Flickr</a>, posted by 
                  <a href={this.state.activeMarkerProps.firstImageOwnerPage}> this photographer.</a>
                  <br></br><br></br>
                  As just one source for more information about this place, you can check out
                  <a href={this.state.activeMarkerProps && this.state.activeMarkerProps.website}> Seattle Park's and Recreation's page about the site.</a> 
                </p>
              </div>
              ) : <p>"Unfortunately, we don't have any additional information about this location available at the moment. If you are looking to learn more about this place,  don't hesitate to send us a line, and check back soon!"</p>
            }
            </InfoWindow>
          </Map>
      </div>
      </div>
    );
  }
}
 
export default GoogleApiWrapper({
  apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(LocationsDisplay)

---------------------------------------------------------------------------------------


// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA

-------------------------------------------------------------------------------------------

// Code from: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
getVenues = (props, data) => {
  return data
        .response
        .venues
        .filter(item => item.name.includes(props.name) || props.name.includes(item.name))
}

--------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#000000">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    <!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json">
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Best Views Seattle Map</title>
    <!-- <link rel="stylesheet" href="https://bootswatch.com/4/sandstone/bootstrap.min.css"> -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o"></script>
  </head>
  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


------------------------------------------


 markerPropsArray = []
    markersArray = []

    // Consulted for creating and adding new LI: https://www.w3schools.com/jsref/met_node_appendchild.asp
    // Code for clearing list: https://stackoverflow.com/a/27324794
    populateList = () => {
        const listViewList = document.getElementById('list-view-list')
        if (listViewList) {
            listViewList.innerHTML = ''
        
        let clickLI = this.props.onClickLI
        let i = 0;
        let markerPropsArray = this.props.markerPropsProp
        let markersList = this.props.markersList
        let associatedMarker
        let associatedMarkerProps
        let newLI
        if (markerPropsArray) {
            markerPropsArray.forEach(markerProp => {
                newLI = document.createElement('li')
                newLI.innerHTML = markerProp.name;
                associatedMarker = markersList[i]
                associatedMarkerProps = markerPropsArray[i]
                newLI.addEventListener('click', () => clickLI(associatedMarkerProps, associatedMarker))
                listViewList.appendChild(newLI)
                i++
                })
            }
        }
    }

    render() {
        return(
            <div className="list-view-container">
                <SelectMenu
                    filterLocations={this.props.filterLocations}
                />
                <ul id="list-view-list">
                {/* An appropriately filtered list of locations will go here
                    whenever `.populateList()` is invoked.
                */}
                </ul>
            </div>
        )
    }
}

-----------------------------------------------------


// Based on https://github.com/jacobwolson/google-maps-react/blob/master/src/components/Marker.js

import React from 'react'
import PropTypes from 'prop-types'

import { camelize } from '../lib/String'

const evtNames = [
  'click',
  'dblclick',
  'dragend',
  'mousedown',
  'mouseout',
  'mouseover',
  'mouseup',s
  'recenter',
];

const wrappedPromise = function() {
    var wrappedPromise = {},
        promise = new Promise(function (resolve, reject) {
            wrappedPromise.resolve = resolve;
            wrappedPromise.reject = reject;
        });
    wrappedPromise.then = promise.then.bind(promise);
    wrappedPromise.catch = promise.catch.bind(promise);
    wrappedPromise.promise = promise;

    return wrappedPromise;
}

export class Marker extends React.Component {

  componentDidMount() {
    this.markerPromise = wrappedPromise();
    this.renderMarker();
    this.storeMarkerRefs();
  }

  componentDidUpdate(prevProps) {
    if ((this.props.map !== prevProps.map) ||
      (this.props.position !== prevProps.position) ||
      (this.props.icon !== prevProps.icon)) {
        if (this.marker) {
            this.marker.setMap(null);
        }
        this.renderMarker();
    }
  }

  componentWillUnmount() {
    if (this.marker) {
      this.marker.setMap(null);
    }
  }

  renderMarker() {
    const {
      map,
      google,
      position,
      mapCenter,
      icon,
      label,
      draggable,
      title,
      ...props
    } = this.props;
    if (!google) {
      return null
    }

    let pos = position || mapCenter;
    if (!(pos instanceof google.maps.LatLng)) {
      pos = new google.maps.LatLng(pos.lat, pos.lng);
    }

    const pref = {
      map,
      position: pos,
      icon,
      label,
      title,
      draggable,
      ...props
    };
    this.marker = new google.maps.Marker(pref);

    evtNames.forEach(e => {
      this.marker.addListener(e, this.handleEvent(e));
    });

    this.markerPromise.resolve(this.marker);
  }

  getMarker() {
    return this.markerPromise;
  }

  handleEvent(evt) {
    return (e) => {
      const evtName = `on${camelize(evt)}`
      if (this.props[evtName]) {
        this.props[evtName](this.props, this.marker, e);
      }
    }
  }

  render() {
    return null;
  }
}

Marker.propTypes = {
  position: PropTypes.object,
  map: PropTypes.object
}

evtNames.forEach(e => Marker.propTypes[e] = PropTypes.func)

Marker.defaultProps = {
  name: 'Marker'
}

export default Marker


---------------------------------------------------

import React, { Component } from 'react'
import SelectMenu from './SelectMenu'
class OldListView extends Component {
    
    markerPropsArray = []
    markersArray = []

    // Consulted for creating and adding new LI: https://www.w3schools.com/jsref/met_node_appendchild.asp
    // Code for clearing list: https://stackoverflow.com/a/27324794
    populateList = () => {
        const listViewList = document.getElementById('list-view-list')
        if (listViewList) {
            listViewList.innerHTML = ''
        
        let clickLI = this.props.onClickLI
        let i = 0;
        let markerPropsList = this.props.markerPropsProp
        let markersList = this.props.markersList
        if (markerPropsList) {
        markerPropsList.forEach(markerProp => {
            const newLI = document.createElement('li')
            newLI.innerHTML = markerProp.name;
            let associatedMarker = markersList[i]
            let associatedMarkerProps = markerPropsList[i]
            newLI.addEventListener('click', () => clickLI(associatedMarkerProps, associatedMarker))
            listViewList.appendChild(newLI)
            i++
        })
        }
        }
    }

    render() {

        return(
            <div className="list-view-container">
                <SelectMenu
                    filterLocations={this.props.filterLocations}
                />
                <ul id="list-view-list">
                {/* An appropriately filtered list of our locations will go here whenever the `.populateList()` method is invoked.
                */}
                </ul>
            </div>
        )
    }
}

export default OldListView

------------------------------------------------------

// Walkthrough consulted: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be

/* Consulted sources, general: https://scotch.io/tutorials/react-apps-with-the-google-maps-api-and-google-maps-react
    https://github.com/fullstackreact/google-maps-react/blob/master/README.md
*/
// Consulted for dynamically adding markers: https://stackoverflow.com/a/43938322

/* consulted: https://stackoverflow.com/a/53322289
https://stackoverflow.com/a/47563854
https://reactjs.org/docs/lifting-state-up.html#lifting-state-up
*/

import React, { Component } from 'react'
import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'
import ListView from './ListView'
import OldListView from './OldListView'

const FOURSQUARE_CLIENT_ID = "WBRJ0OIHLBSA0BEJ0WYUGV2EYMNV5DN25SNEGYBVCM0LPR0M"
const FOURSQUARE_CLIENT_SECRET = "44CDSMTT0QOYYOHLTJHZOOP5OL5XDC2JZIUFWJFNSHXI0DGH"
const FOURSQUARE_VERSION = "20181125"

export class OldMapContainer extends Component {

  mapObject = null 
 
  state = {
    // mapObject: null,
    markers: [],
    markerProps: [],
    activeMarker: null,
    activeMarkerProps: null,
    showingInfoWindow: false,          
  };

  markersArray = []
  markerPropsArray = []
  
  onMapReady = (mapProps, map) => {
    console.log("Map ready!")
    this.mapObject = map
    this.updateMarkers(this.props.locations)
    // this.refs.listView.populateList()
    this.refs.oldListView.populateList()
  }

  componentDidUpdate() {
    this.updateMarkers(this.props.locations)
    // this.refs.listView.populateList()
    this.refs.oldListView.populateList()
  }

  // Modified from: https://stackoverflow.com/a/16436975
  // Also consulted: https://stackoverflow.com/a/14853974
  arraysMatch(array1, array2) {
    if (array1 == null || array2 == null) return null
    if (array1.length != array2.length) return null
    let i = 0
    let testArray = []
    array1.forEach(item => {
        if (item.name === array2[i].name) {
          testArray.push("match")
        }
        i++
      }
    )
    if (testArray.length === array2.length) {
      return true 
    } else {
      return null
    }
  }

  updateMarkers = (locations) => {
    console.log("Updating markers")
    if (!locations) {
      console.log("no locations available")
      return
    }
    
    let markerPropsTemp = []
    let markersTemp = []
    
    locations.forEach((location, i) => {
      let theseMarkerProps = {
        name: location.name,
        key: i,
        index: i,
        position: location.coordinates,
        url: location.url
      }
      markerPropsTemp.push(theseMarkerProps)
    });

    // let testArray = []
    // if (this.state.markerProps.filter(markerProp => markerProp.name).length !== 0) {
    //   testArray = this.state.markerProps.filter((markerProp, i) => markerProp.name === markerPropsTemp[i].name)
    // }
    // https://stackoverflow.com/a/16436975

    let arraysMatch = this.arraysMatch(this.state.markerProps, markerPropsTemp)
    if (!arraysMatch) {
      this.state.markers.forEach(marker => marker.setMap(null))
      locations.forEach((location, i) => {
      let animation = 4
      let thisMarker = new this.props.google.maps.Marker({
        position: location.coordinates,
        map: this.mapObject,
        animation: animation,
        url: location.url
      })
      thisMarker.addListener('click', () => {
        this.onMarkerClick(markerPropsTemp[i], thisMarker, null)
      })
      markersTemp.push(thisMarker)
      return thisMarker
      })
      this.setState({markers: markersTemp, markerProps: markerPropsTemp}) 
    }
}

// Code from: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
getVenues = (props, data) => {
  return data
        .response
        .venues
        .filter(item => item.name.includes(props.name) || props.name.includes(item.name))
}

onMarkerClick = (props, marker, e) => {
  console.log("On Marker Click Invoked")
  this.closeInfoWindow()
  // Fetch info from Foursquare
  // https://stackoverflow.com/a/17864016
  // https://developer.foursquare.com/docs/api/configuration/versioning
  let fsUrl = `https://api.foursquare.com/v2/venues/search?client_id=${FOURSQUARE_CLIENT_ID}&client_secret=${FOURSQUARE_CLIENT_SECRET}&v=${FOURSQUARE_VERSION}&radius=100&ll=${props.position.lat},${props.position.lng}&llAcc=200`
  let headers = new Headers()
  let request = new Request(fsUrl, {
    method: 'GET',
    headers
  })
  // Code from: https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be
  let activeMarkerProps
  fetch(request)
    .then(response => response.json())
    .then(result => {
      let venue = this.getVenues(props, result)[0]
      activeMarkerProps = {
        // props that were passed in to funciton
        ...props,
        // foursquare data for venue
        foursquare: venue
      }
      if (activeMarkerProps.foursquare) {
        let imageUrl = `https://api.foursquare.com/v2/venues/${venue.id}/photos?client_id=${FOURSQUARE_CLIENT_ID}&client_secret=${FOURSQUARE_CLIENT_SECRET}&v=${FOURSQUARE_VERSION}`
        fetch(imageUrl).then(response => response.json()).then(result => {
          activeMarkerProps = {
            ...activeMarkerProps,
            images: result.response.photos
          }
          if (this.state.activeMarker)
            this.state.activeMarker.setAnimation(null)
            // marker.setAnimation(this.props.google.maps.Animation.BOUNCE)
            // thanks to: https://stackoverflow.com/a/36396843
            marker.setAnimation(4)
            {this.setState({
              activeMarkerProps,
              activeMarker: marker,
              showingInfoWindow: true
            })}
        })
      } else {
          // marker.setAnimation(this.props.google.maps.Animation.BOUNCE)
          marker.setAnimation(4)
          {this.setState({
            activeMarkerProps,
            activeMarker: marker,
            showingInfoWindow: true
          })}
      }
    })
  }
      
closeInfoWindow = () => {
  if (this.state.activeMarker) {
    this.state.activeMarker.setAnimation(null)
    this.setState({
      activeMarker: null,
      activeMarkerProps: null,
      showingInfoWindow: false
    })
  }
}

  onMapClicked = (props) => {
    if (this.state.showingInfoWindow) {
      this.setState({
        showingInfoWindow: false,
        activeMarker: null
      })
    }
  }

  filterLocations = (selectedOption) => {
    selectedOption === 'anywhere' 
    ? this.props.showAll()
    : selectedOption === 'southOfCal' 
    ? this.props.showSouthOfCal()
    : selectedOption === 'westOfCal'
    ? this.props.showWestOfCal()
    : selectedOption === 'northOfCal' 
    && this.props.showNorthOfCal()
  }

  render() {
    return (
      <div className="container map-component-container">
        <div className="container list-view-container">
          <OldListView
            // ListView ..
            google={this.props.google}
            // ref="listView"
            ref="oldListView"
            locations={this.props.locations}
            let markersList={this.state.markers}
            let markerPropsProp={this.state.markerProps}
            onClickLI={this.onMarkerClick}
            onClose={this.onClose}
            buttonOneOnClick={this.props.buttonOneOnClick}
            buttonOneText={this.props.buttonOneText}
            buttonTwoOnClick={this.props.buttonTwoOnClick}
            buttonTwoText={this.props.buttonTwoText}
            For SelectMenu component
            filterLocations={this.filterLocations}
          />
        </div>
        <div className="container map-view-container">
          <Map 
            google={this.props.google}
            onReady={this.onMapReady}
            onClick={this.onMapClicked}
            style={this.props.mapStyles} 
            zoom={this.props.zoom}
            initialCenter={this.props.initialCenter}
          >
            <InfoWindow
              marker={this.state.activeMarker}
              visible={this.state.showingInfoWindow}
              onClose={this.closeInfoWindow}
            >
              <div>
                <h4>{this.state.activeMarkerProps && this.state.activeMarkerProps.name}</h4>
                {this.state.activeMarkerProps && (
                  <img src={this.state.activeMarkerProps.images && this.state.activeMarkerProps.images.items[0].prefix + "100x100" + this.state.activeMarkerProps.images.items[0].suffix}/>
                  )
                }
                <div>
                  <a href={this.state.activeMarkerProps && this.state.activeMarkerProps.url}>Website</a>
                </div>
              </div>
            </InfoWindow>
          </Map>
      </div>
      </div>
    );
  }
}
 
export default GoogleApiWrapper({
  apiKey: 'AIzaSyBvmvRFjknv-wc3F8y_SZc1WTy_rLRfW3o'
})(OldMapContainer)

----------------------------------------------------------------

